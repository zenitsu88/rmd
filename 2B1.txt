/*Implement the C program in which main program accepts an array. Main program uses the
FORK system call to create a new process called a child process. Parent process sorts an array
and passes the sorted array to child process through the command line arguments of EXECVE
system call. The child process uses EXECVE system call to load new program which display
array in reverse order.
Code:*/
/*main.c */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

void main(int argc, char *argv[])
{
	int val[10],ele; 
	pid_t pid; 
	char* cval[10];
	char *newenviron[] = {NULL }; 
	int i,j,n,temp;
	printf("\nEnter the size for an array: "); 
	scanf("%d",&n);
	printf("\nEnter %d elements: ", n); 
	for(i=0;i<n;i++)
	    scanf("%d",&val[i]);
	printf("\nEntered elements are: "); 
	for(i=0;i<n;i++)
	    printf("\t%d",val[i]);
	for(i=1;i<n;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(val[j]>val[j+1])
			{
				temp=val[j]; 
				val[j]=val[j+1]; 
				val[j+1]=temp;
			}
		}
	}
	printf("\nSorted elements are: "); 
	for(i=0;i<n;i++)
	printf("\t%d",val[i]);
	printf("\nEnter element to search: "); 
	scanf("%d",&ele);
	val[i] = ele;
	for (i=0; i < n+1; i++)
	{
		char a[sizeof(int)];
		snprintf(a, sizeof(int), "%d", val[i]);
		cval[i] = malloc(sizeof(a)); 
		strcpy(cval[i], a);
	}
	cval[i]=NULL;
	pid=fork(); 
	printf("\nstart process and its child process ID is :%d and parent id is: %d", getpid(), getppid()); 
	if(pid==0)
	{
		execve(argv[1], cval, newenviron); 
		perror("Error in execve call...");
	}
}
